// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`left-aligned, default scales 1`] = `
"<head>
  <script src=\\"http://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.js\\"></script>
  <script src=\\"https://unpkg.com/g-chartframe@5.2.2/build/g-chartframe.js\\"></script>
  <link rel=\\"stylesheet\\" href=\\"//www.ft.com/__origami/service/build/v2/bundles/css?modules=o-fonts@^2.2.0\\">
  <style>
    /**
             * Global styles for Visual Vocabulary Templates
             */

    .section-heading {
      background-color: #00757F;
      color: #fff;
      font-family: MetricWeb;
      font-weight: 600;
      font-size: 20px;
      padding: 8px 8px 5px;
    }

    figure {
      width: fit-content;
    }

    .button-holder {
      margin-bottom: 50px;
    }

    svg {
      font-size: 0;
      fill: transparent;
    }

    .axis {
      font-size: inherit !important;
    }

    /* .overall text styles on axis*/
    .ft-webgraphic-s .axis text,
    .ft-webgraphic-m .axis text,
    .ft-webgraphic-m-default .axis text,
    .ft-webgraphic-l .axis text {
      font-family: MetricWeb;
      fill: #66605C;
    }

    .ft-socialgraphic .axis text,
    .ft-videographic .axis text {
      opacity: 0.5;
    }

    .ft-webgraphic-s .highlighted-label,
    .ft-webgraphic-m .highlighted-label,
    .ft-webgraphic-m-default .highlighted-label,
    .ft-webgraphic-l .highlighted-label {
      fill: #000000;
    }

    .ft-socialgraphic .highlighted-label,
    .ft-videographic .highlighted-label {
      fill: #ffffff;
      opacity: 1;
    }

    .ft-webgraphic-s .axis text,
    .ft-webgraphic-s .highlighted-label {
      font-size: 14px;
    }

    .ft-webgraphic-m .axis text,
    .ft-webgraphic-m .highlighted-label {
      font-size: 16px;
    }

    .ft-webgraphic-m-default .axis text,
    .ft-webgraphic-m-default .highlighted-label {
      font-size: 20px;
    }

    .ft-webgraphic-l .axis text,
    .ft-webgraphic-l .highlighted-label {
      font-size: 18px;
    }

    .ft-printgraphic .axis text,
    .ft-printgraphic .highlighted-label {
      font-family: MetricWeb;
      font-size: 9.6px;
      fill: #000000;
    }

    .ft-socialgraphic .axis text,
    .ft-socialgraphic .highlighted-label {
      font-family: MetricWeb;
      font-size: 28px;
    }

    .ft-videographic .axis text,
    .ft-videographic .highlighted-label {
      font-family: MetricWeb;
      font-size: 48px;
    }

    /* .tick text on yAxis*/
    .ft-webgraphic-s .yAxis text,
    .ft-webgraphic-m .yAxis text,
    .ft-webgraphic-m-default .yAxis text,
    .ft-webgraphic-l .yAxis text {
      fill: #66605C;
      text-anchor: end;
    }

    .ft-printgraphic .yAxis text {
      text-anchor: end;
    }

    .ft-socialgraphic .yAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: end;
    }

    .ft-videographic .yAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: end;
    }

    /* .tick line styles on yAxis*/
    .ft-webgraphic-s .yAxis line,
    .ft-webgraphic-m .yAxis line,
    .ft-webgraphic-m-default .yAxis line,
    .ft-webgraphic-l .yAxis line {
      stroke: #e6d9ce;
      stroke-width: 1px;
    }

    .ft-printgraphic .yAxis line {
      stroke: #000000;
      stroke-width: 0.3px;
    }

    .ft-socialgraphic .yAxis line {
      stroke: #FFFFFF;
      stroke-width: 2px;
      stroke-dasharray: 2, 8;
      stroke-opacity: 0.38;
    }

    .ft-videographic .yAxis line {
      stroke: #FFFFFF;
      stroke-width: 4px;
      stroke-opacity: 0.38;
    }

    /* Makes domian invivible on yAxis*/
    .ft-webgraphic-s .domain,
    .ft-webgraphic-m .domain,
    .ft-webgraphic-m-default .domain,
    .ft-webgraphic-l .domain {
      stroke-width: 0px;
    }

    .ft-printgraphic .domain {
      stroke-width: 0px;
    }

    .ft-socialgraphic .domain {
      stroke-width: 0px;
    }

    .ft-videographic .domain {
      stroke-width: 0px;
    }

    /* reinstate domain for circle timelines*/

    .ft-webgraphic-s .timelineHolder .baseline line,
    .ft-webgraphic-m .timelineHolder .baseline line,
    .ft-webgraphic-m-default .timelineHolder .baseline line,
    .ft-webgraphic-l .timelineHolder .baseline line {
      stroke: #000000;
      stroke-width: 1px;
      stroke-dasharray: 1, 0;
      stroke-opacity: 0.4;
    }

    .ft-webgraphic-s .timelineHolder .domain,
    .ft-webgraphic-m .timelineHolder .domain,
    .ft-webgraphic-m-default .timelineHolder .domain,
    .ft-webgraphic-l .timelineHolder .domain,
    .ft-printgraphic .timelineHolder .domain {
      stroke-width: 1px;
      stroke-opacity: 0.4;
    }

    .ft-socialgraphic .timelineHolder .domain,
    .ft-videographic .timelineHolder .domain {
      stroke: #ffffff;
    }

    .ft-socialgraphic .timelineHolder .domain {
      stroke-width: 2px
    }

    .ft-videographic .timelineHolder .domain {
      stroke-width: 4px
    }

    /* .tick text on yAxis*/
    .ft-webgraphic-s .xAxis text,
    .ft-webgraphic-m .xAxis text,
    .ft-webgraphic-m-default .xAxis text,
    .ft-webgraphic-l .xAxis text {
      fill: #66605C;
      text-anchor: middle;
    }

    .ft-printgraphic .xAxis text {
      text-anchor: middle;
    }

    .ft-socialgraphic .xAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: middle;
    }

    .ft-videographic .xAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: middle;
    }

    .ft-webgraphic-s .xAxis line,
    .ft-webgraphic-m .xAxis line,
    .ft-webgraphic-m-default .xAxis line,
    .ft-webgraphic-l .xAxis line {
      stroke: #e6d9ce;
      stroke-width: 1px;
    }

    .ft-printgraphic .xAxis line {
      stroke: #000000;
      stroke-width: 0.3px;
    }

    .ft-socialgraphic .xAxis line {
      stroke: #FFFFFF;
      stroke-width: 2px;
      stroke-dasharray: 2, 8;
      stroke-opacity: 0.38;
    }

    .ft-videographic .xAxis line {
      stroke: #FFFFFF;
      stroke-width: 4px;
      stroke-opacity: 0.38;
    }

    /* Style for the highlight or base line on yAxis*/
    .ft-webgraphic-s .baseline line,
    .ft-webgraphic-m .baseline line,
    .ft-webgraphic-m-default .baseline line,
    .ft-webgraphic-l .baseline line {
      stroke: #CEC6B9;
      stroke-width: 1px;
      stroke-dasharray: 1, 0;
    }

    .ft-printgraphic .baseline line {
      stroke: #000000;
      stroke-width: 0.6px;
    }

    .ft-printgraphic .xAxis.baseline line {
      stroke: #000000;
      stroke-width: 0.3px;
    }

    .ft-socialgraphic .baseline line {
      stroke: #FFFFFF;
      stroke-width: 2px;
      stroke-dasharray: 1, 0;
      stroke-opacity: 0.5;
    }

    .ft-videographic .baseline line {
      stroke: #FFFFFF;
      stroke-width: 4px;
      stroke-opacity: .38;
    }

    /* Styles for lines on chart*/
    .ft-webgraphic-s .lines,
    .ft-webgraphic-m .lines,
    .ft-webgraphic-m-default .lines,
    .ft-webgraphic-l .lines {
      stroke-linecap: square;
      stroke-linejoin: round;
      stroke-width: 3px;
      fill: none;
    }

    .ft-printgraphic .lines {
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 2px;
      fill: none;
    }

    .ft-socialgraphic .lines {
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 5px;
      fill: none;
    }

    .ft-videographic .lines {
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 8px;
      fill: none;
    }

    /* annotation styling*/

    .ft-webgraphic-s .annotations-holder line,
    .ft-webgraphic-m .annotations-holder line,
    .ft-webgraphic-m-default .annotations-holder line,
    .ft-webgraphic-l .annotations-holder line {
      stroke: #66605C;
      stroke-width: 1px;
    }

    .ft-printgraphic .annotations-holder line {
      stroke: #000000;
      stroke-width: 0.5px;
    }

    .ft-socialgraphic .annotations-holder line {
      stroke: #ffffff;
      stroke-width: 2px;
      opacity: 0.7;
    }

    .ft-videographic .annotations-holder line {
      stroke: #ffffff;
      stroke-width: 4px;
      opacity: 0.7;
    }

    .ft-webgraphic-s .annotations-holder text {
      font-size: 14px;
    }

    .ft-webgraphic-m .annotations-holder text {
      font-size: 16px;
    }

    .ft-webgraphic-m-default .annotations-holder text {
      font-size: 20px;
    }

    .ft-webgraphic-l .annotations-holder text {
      font-size: 18px;
    }

    .ft-webgraphic-s .annotations-holder text,
    .ft-webgraphic-m .annotations-holder text,
    .ft-webgraphic-m-default .annotations-holder text,
    .ft-webgraphic-l .annotations-holder text {
      fill: #66605C;
    }

    .ft-printgraphic .annotations-holder text {
      font-size: 9.6px;
      fill: #000000;
    }

    .ft-socialgraphic .annotations-holder text {
      font-size: 28px;
      fill: #ffffff;
      opacity: 0.7;
    }

    .ft-videographic .annotations-holder text {
      font-size: 48px;
      fill: #ffffff;
      opacity: 0.7;
    }

    /* .overall text styles on axis*/
    .ft-webgraphic-s .highlights,
    .ft-webgraphic-m .highlights,
    .ft-webgraphic-m-default .highlights,
    .ft-webgraphic-l .highlights {
      fill: #FCE6D6;
    }

    .ft-printgraphic .highlights {
      fill: #95BFC5;
      opacity: 0.3;
    }

    .ft-socialgraphic .highlights {
      fill: #ffffff;
      opacity: 0.2;
    }

    .ft-videographic .highlights {
      fill: #ffffff;
      opacity: 0.2;
    }

    .ft-webgraphic-s .timeline-label,
    .ft-webgraphic-m .timeline-label,
    .ft-webgraphic-m-default .timeline-label,
    .ft-webgraphic-l .timeline-label {
      font-family: MetricWeb;
      fill: #000000;
    }

    /* legend */
    .ft-webgraphic-s .legend,
    .ft-webgraphic-m .legend,
    .ft-webgraphic-m-default .legend,
    .ft-webgraphic-l .legend {
      font-family: MetricWeb;
      fill: #66605C;
    }

    .ft-webgraphic-s .timeline-label,
    .ft-webgraphic-s .legend {
      font-size: 14px;
    }

    .ft-webgraphic-m .timeline-label,
    .ft-webgraphic-m .legend {
      font-size: 16px;
    }

    .ft-webgraphic-m-default .timeline-label,
    .ft-webgraphic-m-default .legend {
      font-size: 20px;
    }

    .ft-webgraphic-l .timeline-label,
    .ft-webgraphic-l .legend {
      font-size: 18px;
    }

    .ft-printgraphic .timeline-label,
    .ft-printgraphic .legend {
      font-family: MetricWeb;
      font-size: 9.6px;
      fill: #000000;
    }

    .ft-socialgraphic .timeline-label,
    .ft-socialgraphic .legend text {
      font-family: MetricWeb;
      opacity: 0.5;
      fill: #FFFFFF;
      font-size: 28px;
    }

    .ft-videographic .timeline-label,
    .ft-videographic .legend text {
      font-family: MetricWeb;
      opacity: 0.5;
      fill: #FFFFFF;
      font-size: 48px;
    }

    svg text {
      font-feature-settings: 'tnum', 1;
      -webkit-font-feature-settings: 'tnum';
      -moz-font-feature-settings: 'tnum';
    }

    .saveable button {
      display: block;
    }

    ul {
      line-height: 24px;
    }

    .button {
      border-radius: 10px;
      background-color: #00757F;
      color: #fff;
      font-family: MetricWeb;
      font-weight: 600;
      font-size: 20px;
      height: 25px;
      margin-top: 2px;
      margin-bottom: 10px;
      margin-right: 10px;
      border-width: 0px;
      padding-top: 3px;
      cursor: pointer;
    }
  </style>
  <script>
    (function(global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3')) :
        typeof define === 'function' && define.amd ? define(['d3'], factory) :
        (global.yOrdinal = factory(global.d3));
    }(this, (function(d3) {
      'use strict';

      function yOrdinal() {
        let banding;
        let align = 'left';
        let scale = d3.scaleBand()
          .domain(['Oranges', 'Lemons', 'Apples', 'Pears'])
          .rangeRound([0, 220])
          .paddingInner(0.1)
          .paddingOuter(0.05);

        let labelWidth = 0;
        let tickSize = 0;
        let offset = 0;
        let yLabel;
        let label;
        let plotDim = [220, 100];
        let rem = 10;
        let frameName;
        let invert = false;

        function getAxis(alignment) {
          return {
            left: d3.axisLeft(),
            right: d3.axisRight(),
          } [alignment];
        }

        function axis(parent) {
          const plotWidth = plotDim[0];
          const plotHeight = plotDim[1];

          if (invert) {
            const newDomain = scale.domain().reverse();
            scale.domain(newDomain);
          }

          const yAxis = getAxis(align)
            .tickSize(tickSize)
            .scale(scale);

          if (scale.domain.length > 1) {
            scale.paddingInner(0.1);
          } else {
            scale.paddingInner(0.2);
          }

          const bandHolder = parent.append('g').attr('class', 'highlights');

          yLabel = parent
            .append('g')
            .attr('class', 'axis yAxis')
            .call(yAxis);

          // Calculate width of widest .tick text
          parent.selectAll('.yAxis text').each(function calcTickTextWidth() {
            labelWidth = Math.max(this.getBBox().width, labelWidth);
          });

          if (frameName) {
            yLabel
              .selectAll('.axis.yAxis text')
              .attr('id', \`\${frameName}yLabel\`);
            yLabel
              .selectAll('.axis.xAxis line')
              .attr('id', \`\${frameName}yTick\`);
          }

          if (label) {
            const defaultLabel = {
              tag: label.tag,
              hori: label.hori || 'left',
              vert: label.vert || 'middle',
              anchor: label.anchor || 'middle',
              rotate: label.rotate || -90,
            };

            const axisLabel = parent.append('g').attr('class', 'axis xAxis');

            const getVertical = vert =>
              ({
                top: plotHeight - plotHeight,
                middle: plotHeight / 2,
                bottom: plotHeight,
              } [vert]);

            const calcOffset = () => {
              if (tickSize > 0 && tickSize < rem) {
                return tickSize / 2;
              }
              return 0;
            };

            // prettier-ignore
            const getHorizontal = (axisAlign, horiAlign) => ({
              leftleft: 0 - (labelWidth + (rem * 0.6)),
              leftmiddle: 0 - (labelWidth / 2) - calcOffset(),
              leftright: rem * 0.7,
              rightleft: plotWidth - labelWidth,
              rightmiddle: plotWidth + (labelWidth / 2) + (rem * 0.5) + calcOffset(),
              rightright: plotWidth + (rem) + calcOffset(),
            } [axisAlign + horiAlign]);

            axisLabel
              .append('text')
              .attr('y', getVertical(defaultLabel.vert))
              .attr('x', getHorizontal(align, defaultLabel.hori))
              .text(defaultLabel.tag);

            const text = axisLabel.selectAll('text');
            const width = text.node().getBBox().width / 2;
            const height = text.node().getBBox().height / 2;
            const textX = text.node().getBBox().x + width;
            const textY = text.node().getBBox().y + height;
            text.attr(
              'transform',
              \`rotate(\${defaultLabel.rotate}, \${textX}, \${textY})\`,
            ).style('text-anchor', defaultLabel.anchor);
          }

          if (banding) {
            const bands = scale
              .domain()
              .map(d => ({
                pos: d,
              }))
              .filter((d, i) => i % 2 === 0);

            const yOffset = (scale.step() / 100) * (scale.paddingInner() * 100); // prettier-ignore

            // prettier-ignore
            bandHolder.selectAll('rect')
              .data(bands)
              .enter()
              .append('rect')
              .attr('x', 0)
              .attr('width', plotWidth - labelWidth)
              .attr('y', d => scale(d.pos) - (yOffset / 2))
              .attr('height', scale.step());
          }

          yLabel.selectAll('.domain').remove();
        }

        axis.align = (d) => {
          if (!d) return align;
          align = d;
          return axis;
        };
        axis.banding = (d) => {
          if (d === undefined) return banding;
          banding = d;
          return axis;
        };
        axis.scale = (d) => {
          if (!d) return scale;
          scale = d;
          return axis;
        };
        axis.domain = (d) => {
          scale.domain(d);
          return axis;
        };
        axis.frameName = (d) => {
          if (d === undefined) return frameName;
          frameName = d;
          return axis;
        };
        axis.invert = (d) => {
          if (d === undefined) return invert;
          invert = d;
          return axis;
        };
        axis.label = (d) => {
          if (d === undefined) return label;
          label = d;
          return axis;
        };
        axis.rangeRound = (d) => {
          scale.rangeRound(d);
          return axis;
        };
        axis.bandwidth = (d) => {
          if (!d) return scale.bandwidth();
          scale.bandwidth(d);
          return axis;
        };
        axis.labelWidth = (d) => {
          if (d === undefined) return labelWidth;
          labelWidth = d;
          return axis;
        };
        axis.yLabel = (d) => {
          if (d === undefined) return yLabel;
          yLabel = d;
          return axis;
        };
        axis.paddingInner = (d) => {
          if (!d) return scale.paddingInner();
          scale.paddingInner(d);
          return axis;
        };
        axis.paddingOuter = (d) => {
          if (!d) return scale.paddingOuter();
          scale.paddingOuter(d);
          return axis;
        };
        axis.plotDim = (d) => {
          if (!d) return plotDim;
          plotDim = d;
          return axis;
        };
        axis.rem = (d) => {
          if (!d) return rem;
          rem = d;
          return axis;
        };
        axis.tickSize = (d) => {
          if (d === undefined) return tickSize;
          tickSize = d;
          return axis;
        };
        axis.offset = (d) => {
          if (d === undefined) return offset;
          offset = d;
          return axis;
        };

        return axis;
      }

      return yOrdinal;

    })));
  </script>
</head>

<body><svg class=\\"ft-webgraphic-m-default\\" font-family=\\"MetricWeb,sans-serif\\" role=\\"img\\" aria-labelledby=\\"ft-webgraphic-m-default__chart-a11y-title ft-webgraphic-m-default__chart-a11y-desc\\" width=\\"700\\" height=\\"500\\" viewBox=\\"0 0 700 500\\">
    <title id=\\"ft-webgraphic-m-default__chart-a11y-title\\">A chart</title>
    <desc id=\\"ft-webgraphic-m-default__chart-a11y-desc\\">A graphic by the Financial Times</desc>
    <rect role=\\"presentation\\" id=\\"chart-background\\" class=\\"chart-background\\" x=\\"0\\" y=\\"0\\" width=\\"700\\" height=\\"500\\" fill=\\"rgb(255, 241, 224)\\"></rect>
    <rect width=\\"60\\" height=\\"4\\" style=\\"fill: rgb(0, 0, 0);\\"></rect><text class=\\"chart-title\\" id=\\"ft-webgraphic-m-defaulttitle\\">
      <tspan y=\\"32\\" x=\\"1\\" font-size=\\"28\\" font-family=\\"MetricWeb,sans-serif\\" font-weight=\\"400\\" fill=\\"#000\\">yOrdinal test</tspan>
    </text><text id=\\"ft-webgraphic-m-defaultsubtitle\\" class=\\"chart-subtitle\\">
      <tspan id=\\"ft-webgraphic-m-defaultsubtitle\\" y=\\"68\\" x=\\"1\\" font-size=\\"24\\" font-family=\\"MetricWeb,sans-serif\\" fill=\\"#66605C\\">Left-aligned, default scales</tspan>
    </text><text class=\\"chart-copyright\\">
      <tspan x=\\"1\\" y=\\"464\\" font-size=\\"14px\\" font-style=\\"italic\\" font-family=\\"MetricWeb,sans-serif\\" fill=\\"#66605C\\">© FT</tspan>
    </text>
    <g class=\\"chart-watermark\\" role=\\"presentation\\" transform=\\"translate(536,490) scale(1) \\"></g>
    <g class=\\"chart-plot\\" role=\\"presentation\\" transform=\\"translate(86.640625, 108)\\">
      <g class=\\"highlights\\"></g>
      <g class=\\"axis yAxis\\" fill=\\"none\\" font-size=\\"10\\" font-family=\\"sans-serif\\" text-anchor=\\"end\\">
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,32.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"-3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Oranges</text>
        </g>
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,103.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"-3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Lemons</text>
        </g>
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,174.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"-3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Apples</text>
        </g>
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,245.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"-3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Pears</text>
        </g>
      </g>
    </g>
    <title id=\\"ft-webgraphic-m-default__chart-a11y-title\\">A chart</title>
    <desc id=\\"ft-webgraphic-m-default__chart-a11y-desc\\">A graphic by the Financial Times</desc>
    <rect width=\\"60\\" height=\\"4\\" style=\\"fill: rgb(0, 0, 0);\\"></rect>
  </svg>
  <div class=\\"button-holder\\"><button class=\\"save-png-button save-png-button__1x\\" style=\\"float: left; opacity: 0.6;\\">Save as .png</button><button class=\\"save-png-button save-png-button__2x\\" style=\\"float: left; opacity: 0.6;\\">Save as double size .png</button></div>
</body>"
`;

exports[`right-aligned, default scales 1`] = `
"<head>
  <script src=\\"http://cdnjs.cloudflare.com/ajax/libs/d3/4.13.0/d3.js\\"></script>
  <script src=\\"https://unpkg.com/g-chartframe@5.2.2/build/g-chartframe.js\\"></script>
  <link rel=\\"stylesheet\\" href=\\"//www.ft.com/__origami/service/build/v2/bundles/css?modules=o-fonts@^2.2.0\\">
  <style>
    /**
             * Global styles for Visual Vocabulary Templates
             */

    .section-heading {
      background-color: #00757F;
      color: #fff;
      font-family: MetricWeb;
      font-weight: 600;
      font-size: 20px;
      padding: 8px 8px 5px;
    }

    figure {
      width: fit-content;
    }

    .button-holder {
      margin-bottom: 50px;
    }

    svg {
      font-size: 0;
      fill: transparent;
    }

    .axis {
      font-size: inherit !important;
    }

    /* .overall text styles on axis*/
    .ft-webgraphic-s .axis text,
    .ft-webgraphic-m .axis text,
    .ft-webgraphic-m-default .axis text,
    .ft-webgraphic-l .axis text {
      font-family: MetricWeb;
      fill: #66605C;
    }

    .ft-socialgraphic .axis text,
    .ft-videographic .axis text {
      opacity: 0.5;
    }

    .ft-webgraphic-s .highlighted-label,
    .ft-webgraphic-m .highlighted-label,
    .ft-webgraphic-m-default .highlighted-label,
    .ft-webgraphic-l .highlighted-label {
      fill: #000000;
    }

    .ft-socialgraphic .highlighted-label,
    .ft-videographic .highlighted-label {
      fill: #ffffff;
      opacity: 1;
    }

    .ft-webgraphic-s .axis text,
    .ft-webgraphic-s .highlighted-label {
      font-size: 14px;
    }

    .ft-webgraphic-m .axis text,
    .ft-webgraphic-m .highlighted-label {
      font-size: 16px;
    }

    .ft-webgraphic-m-default .axis text,
    .ft-webgraphic-m-default .highlighted-label {
      font-size: 20px;
    }

    .ft-webgraphic-l .axis text,
    .ft-webgraphic-l .highlighted-label {
      font-size: 18px;
    }

    .ft-printgraphic .axis text,
    .ft-printgraphic .highlighted-label {
      font-family: MetricWeb;
      font-size: 9.6px;
      fill: #000000;
    }

    .ft-socialgraphic .axis text,
    .ft-socialgraphic .highlighted-label {
      font-family: MetricWeb;
      font-size: 28px;
    }

    .ft-videographic .axis text,
    .ft-videographic .highlighted-label {
      font-family: MetricWeb;
      font-size: 48px;
    }

    /* .tick text on yAxis*/
    .ft-webgraphic-s .yAxis text,
    .ft-webgraphic-m .yAxis text,
    .ft-webgraphic-m-default .yAxis text,
    .ft-webgraphic-l .yAxis text {
      fill: #66605C;
      text-anchor: end;
    }

    .ft-printgraphic .yAxis text {
      text-anchor: end;
    }

    .ft-socialgraphic .yAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: end;
    }

    .ft-videographic .yAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: end;
    }

    /* .tick line styles on yAxis*/
    .ft-webgraphic-s .yAxis line,
    .ft-webgraphic-m .yAxis line,
    .ft-webgraphic-m-default .yAxis line,
    .ft-webgraphic-l .yAxis line {
      stroke: #e6d9ce;
      stroke-width: 1px;
    }

    .ft-printgraphic .yAxis line {
      stroke: #000000;
      stroke-width: 0.3px;
    }

    .ft-socialgraphic .yAxis line {
      stroke: #FFFFFF;
      stroke-width: 2px;
      stroke-dasharray: 2, 8;
      stroke-opacity: 0.38;
    }

    .ft-videographic .yAxis line {
      stroke: #FFFFFF;
      stroke-width: 4px;
      stroke-opacity: 0.38;
    }

    /* Makes domian invivible on yAxis*/
    .ft-webgraphic-s .domain,
    .ft-webgraphic-m .domain,
    .ft-webgraphic-m-default .domain,
    .ft-webgraphic-l .domain {
      stroke-width: 0px;
    }

    .ft-printgraphic .domain {
      stroke-width: 0px;
    }

    .ft-socialgraphic .domain {
      stroke-width: 0px;
    }

    .ft-videographic .domain {
      stroke-width: 0px;
    }

    /* reinstate domain for circle timelines*/

    .ft-webgraphic-s .timelineHolder .baseline line,
    .ft-webgraphic-m .timelineHolder .baseline line,
    .ft-webgraphic-m-default .timelineHolder .baseline line,
    .ft-webgraphic-l .timelineHolder .baseline line {
      stroke: #000000;
      stroke-width: 1px;
      stroke-dasharray: 1, 0;
      stroke-opacity: 0.4;
    }

    .ft-webgraphic-s .timelineHolder .domain,
    .ft-webgraphic-m .timelineHolder .domain,
    .ft-webgraphic-m-default .timelineHolder .domain,
    .ft-webgraphic-l .timelineHolder .domain,
    .ft-printgraphic .timelineHolder .domain {
      stroke-width: 1px;
      stroke-opacity: 0.4;
    }

    .ft-socialgraphic .timelineHolder .domain,
    .ft-videographic .timelineHolder .domain {
      stroke: #ffffff;
    }

    .ft-socialgraphic .timelineHolder .domain {
      stroke-width: 2px
    }

    .ft-videographic .timelineHolder .domain {
      stroke-width: 4px
    }

    /* .tick text on yAxis*/
    .ft-webgraphic-s .xAxis text,
    .ft-webgraphic-m .xAxis text,
    .ft-webgraphic-m-default .xAxis text,
    .ft-webgraphic-l .xAxis text {
      fill: #66605C;
      text-anchor: middle;
    }

    .ft-printgraphic .xAxis text {
      text-anchor: middle;
    }

    .ft-socialgraphic .xAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: middle;
    }

    .ft-videographic .xAxis text {
      opacity: 0.5;
      fill: #FFFFFF;
      text-anchor: middle;
    }

    .ft-webgraphic-s .xAxis line,
    .ft-webgraphic-m .xAxis line,
    .ft-webgraphic-m-default .xAxis line,
    .ft-webgraphic-l .xAxis line {
      stroke: #e6d9ce;
      stroke-width: 1px;
    }

    .ft-printgraphic .xAxis line {
      stroke: #000000;
      stroke-width: 0.3px;
    }

    .ft-socialgraphic .xAxis line {
      stroke: #FFFFFF;
      stroke-width: 2px;
      stroke-dasharray: 2, 8;
      stroke-opacity: 0.38;
    }

    .ft-videographic .xAxis line {
      stroke: #FFFFFF;
      stroke-width: 4px;
      stroke-opacity: 0.38;
    }

    /* Style for the highlight or base line on yAxis*/
    .ft-webgraphic-s .baseline line,
    .ft-webgraphic-m .baseline line,
    .ft-webgraphic-m-default .baseline line,
    .ft-webgraphic-l .baseline line {
      stroke: #CEC6B9;
      stroke-width: 1px;
      stroke-dasharray: 1, 0;
    }

    .ft-printgraphic .baseline line {
      stroke: #000000;
      stroke-width: 0.6px;
    }

    .ft-printgraphic .xAxis.baseline line {
      stroke: #000000;
      stroke-width: 0.3px;
    }

    .ft-socialgraphic .baseline line {
      stroke: #FFFFFF;
      stroke-width: 2px;
      stroke-dasharray: 1, 0;
      stroke-opacity: 0.5;
    }

    .ft-videographic .baseline line {
      stroke: #FFFFFF;
      stroke-width: 4px;
      stroke-opacity: .38;
    }

    /* Styles for lines on chart*/
    .ft-webgraphic-s .lines,
    .ft-webgraphic-m .lines,
    .ft-webgraphic-m-default .lines,
    .ft-webgraphic-l .lines {
      stroke-linecap: square;
      stroke-linejoin: round;
      stroke-width: 3px;
      fill: none;
    }

    .ft-printgraphic .lines {
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 2px;
      fill: none;
    }

    .ft-socialgraphic .lines {
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 5px;
      fill: none;
    }

    .ft-videographic .lines {
      stroke-linecap: round;
      stroke-linejoin: round;
      stroke-width: 8px;
      fill: none;
    }

    /* annotation styling*/

    .ft-webgraphic-s .annotations-holder line,
    .ft-webgraphic-m .annotations-holder line,
    .ft-webgraphic-m-default .annotations-holder line,
    .ft-webgraphic-l .annotations-holder line {
      stroke: #66605C;
      stroke-width: 1px;
    }

    .ft-printgraphic .annotations-holder line {
      stroke: #000000;
      stroke-width: 0.5px;
    }

    .ft-socialgraphic .annotations-holder line {
      stroke: #ffffff;
      stroke-width: 2px;
      opacity: 0.7;
    }

    .ft-videographic .annotations-holder line {
      stroke: #ffffff;
      stroke-width: 4px;
      opacity: 0.7;
    }

    .ft-webgraphic-s .annotations-holder text {
      font-size: 14px;
    }

    .ft-webgraphic-m .annotations-holder text {
      font-size: 16px;
    }

    .ft-webgraphic-m-default .annotations-holder text {
      font-size: 20px;
    }

    .ft-webgraphic-l .annotations-holder text {
      font-size: 18px;
    }

    .ft-webgraphic-s .annotations-holder text,
    .ft-webgraphic-m .annotations-holder text,
    .ft-webgraphic-m-default .annotations-holder text,
    .ft-webgraphic-l .annotations-holder text {
      fill: #66605C;
    }

    .ft-printgraphic .annotations-holder text {
      font-size: 9.6px;
      fill: #000000;
    }

    .ft-socialgraphic .annotations-holder text {
      font-size: 28px;
      fill: #ffffff;
      opacity: 0.7;
    }

    .ft-videographic .annotations-holder text {
      font-size: 48px;
      fill: #ffffff;
      opacity: 0.7;
    }

    /* .overall text styles on axis*/
    .ft-webgraphic-s .highlights,
    .ft-webgraphic-m .highlights,
    .ft-webgraphic-m-default .highlights,
    .ft-webgraphic-l .highlights {
      fill: #FCE6D6;
    }

    .ft-printgraphic .highlights {
      fill: #95BFC5;
      opacity: 0.3;
    }

    .ft-socialgraphic .highlights {
      fill: #ffffff;
      opacity: 0.2;
    }

    .ft-videographic .highlights {
      fill: #ffffff;
      opacity: 0.2;
    }

    .ft-webgraphic-s .timeline-label,
    .ft-webgraphic-m .timeline-label,
    .ft-webgraphic-m-default .timeline-label,
    .ft-webgraphic-l .timeline-label {
      font-family: MetricWeb;
      fill: #000000;
    }

    /* legend */
    .ft-webgraphic-s .legend,
    .ft-webgraphic-m .legend,
    .ft-webgraphic-m-default .legend,
    .ft-webgraphic-l .legend {
      font-family: MetricWeb;
      fill: #66605C;
    }

    .ft-webgraphic-s .timeline-label,
    .ft-webgraphic-s .legend {
      font-size: 14px;
    }

    .ft-webgraphic-m .timeline-label,
    .ft-webgraphic-m .legend {
      font-size: 16px;
    }

    .ft-webgraphic-m-default .timeline-label,
    .ft-webgraphic-m-default .legend {
      font-size: 20px;
    }

    .ft-webgraphic-l .timeline-label,
    .ft-webgraphic-l .legend {
      font-size: 18px;
    }

    .ft-printgraphic .timeline-label,
    .ft-printgraphic .legend {
      font-family: MetricWeb;
      font-size: 9.6px;
      fill: #000000;
    }

    .ft-socialgraphic .timeline-label,
    .ft-socialgraphic .legend text {
      font-family: MetricWeb;
      opacity: 0.5;
      fill: #FFFFFF;
      font-size: 28px;
    }

    .ft-videographic .timeline-label,
    .ft-videographic .legend text {
      font-family: MetricWeb;
      opacity: 0.5;
      fill: #FFFFFF;
      font-size: 48px;
    }

    svg text {
      font-feature-settings: 'tnum', 1;
      -webkit-font-feature-settings: 'tnum';
      -moz-font-feature-settings: 'tnum';
    }

    .saveable button {
      display: block;
    }

    ul {
      line-height: 24px;
    }

    .button {
      border-radius: 10px;
      background-color: #00757F;
      color: #fff;
      font-family: MetricWeb;
      font-weight: 600;
      font-size: 20px;
      height: 25px;
      margin-top: 2px;
      margin-bottom: 10px;
      margin-right: 10px;
      border-width: 0px;
      padding-top: 3px;
      cursor: pointer;
    }
  </style>
  <script>
    (function(global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3')) :
        typeof define === 'function' && define.amd ? define(['d3'], factory) :
        (global.yOrdinal = factory(global.d3));
    }(this, (function(d3) {
      'use strict';

      function yOrdinal() {
        let banding;
        let align = 'left';
        let scale = d3.scaleBand()
          .domain(['Oranges', 'Lemons', 'Apples', 'Pears'])
          .rangeRound([0, 220])
          .paddingInner(0.1)
          .paddingOuter(0.05);

        let labelWidth = 0;
        let tickSize = 0;
        let offset = 0;
        let yLabel;
        let label;
        let plotDim = [220, 100];
        let rem = 10;
        let frameName;
        let invert = false;

        function getAxis(alignment) {
          return {
            left: d3.axisLeft(),
            right: d3.axisRight(),
          } [alignment];
        }

        function axis(parent) {
          const plotWidth = plotDim[0];
          const plotHeight = plotDim[1];

          if (invert) {
            const newDomain = scale.domain().reverse();
            scale.domain(newDomain);
          }

          const yAxis = getAxis(align)
            .tickSize(tickSize)
            .scale(scale);

          if (scale.domain.length > 1) {
            scale.paddingInner(0.1);
          } else {
            scale.paddingInner(0.2);
          }

          const bandHolder = parent.append('g').attr('class', 'highlights');

          yLabel = parent
            .append('g')
            .attr('class', 'axis yAxis')
            .call(yAxis);

          // Calculate width of widest .tick text
          parent.selectAll('.yAxis text').each(function calcTickTextWidth() {
            labelWidth = Math.max(this.getBBox().width, labelWidth);
          });

          if (frameName) {
            yLabel
              .selectAll('.axis.yAxis text')
              .attr('id', \`\${frameName}yLabel\`);
            yLabel
              .selectAll('.axis.xAxis line')
              .attr('id', \`\${frameName}yTick\`);
          }

          if (label) {
            const defaultLabel = {
              tag: label.tag,
              hori: label.hori || 'left',
              vert: label.vert || 'middle',
              anchor: label.anchor || 'middle',
              rotate: label.rotate || -90,
            };

            const axisLabel = parent.append('g').attr('class', 'axis xAxis');

            const getVertical = vert =>
              ({
                top: plotHeight - plotHeight,
                middle: plotHeight / 2,
                bottom: plotHeight,
              } [vert]);

            const calcOffset = () => {
              if (tickSize > 0 && tickSize < rem) {
                return tickSize / 2;
              }
              return 0;
            };

            // prettier-ignore
            const getHorizontal = (axisAlign, horiAlign) => ({
              leftleft: 0 - (labelWidth + (rem * 0.6)),
              leftmiddle: 0 - (labelWidth / 2) - calcOffset(),
              leftright: rem * 0.7,
              rightleft: plotWidth - labelWidth,
              rightmiddle: plotWidth + (labelWidth / 2) + (rem * 0.5) + calcOffset(),
              rightright: plotWidth + (rem) + calcOffset(),
            } [axisAlign + horiAlign]);

            axisLabel
              .append('text')
              .attr('y', getVertical(defaultLabel.vert))
              .attr('x', getHorizontal(align, defaultLabel.hori))
              .text(defaultLabel.tag);

            const text = axisLabel.selectAll('text');
            const width = text.node().getBBox().width / 2;
            const height = text.node().getBBox().height / 2;
            const textX = text.node().getBBox().x + width;
            const textY = text.node().getBBox().y + height;
            text.attr(
              'transform',
              \`rotate(\${defaultLabel.rotate}, \${textX}, \${textY})\`,
            ).style('text-anchor', defaultLabel.anchor);
          }

          if (banding) {
            const bands = scale
              .domain()
              .map(d => ({
                pos: d,
              }))
              .filter((d, i) => i % 2 === 0);

            const yOffset = (scale.step() / 100) * (scale.paddingInner() * 100); // prettier-ignore

            // prettier-ignore
            bandHolder.selectAll('rect')
              .data(bands)
              .enter()
              .append('rect')
              .attr('x', 0)
              .attr('width', plotWidth - labelWidth)
              .attr('y', d => scale(d.pos) - (yOffset / 2))
              .attr('height', scale.step());
          }

          yLabel.selectAll('.domain').remove();
        }

        axis.align = (d) => {
          if (!d) return align;
          align = d;
          return axis;
        };
        axis.banding = (d) => {
          if (d === undefined) return banding;
          banding = d;
          return axis;
        };
        axis.scale = (d) => {
          if (!d) return scale;
          scale = d;
          return axis;
        };
        axis.domain = (d) => {
          scale.domain(d);
          return axis;
        };
        axis.frameName = (d) => {
          if (d === undefined) return frameName;
          frameName = d;
          return axis;
        };
        axis.invert = (d) => {
          if (d === undefined) return invert;
          invert = d;
          return axis;
        };
        axis.label = (d) => {
          if (d === undefined) return label;
          label = d;
          return axis;
        };
        axis.rangeRound = (d) => {
          scale.rangeRound(d);
          return axis;
        };
        axis.bandwidth = (d) => {
          if (!d) return scale.bandwidth();
          scale.bandwidth(d);
          return axis;
        };
        axis.labelWidth = (d) => {
          if (d === undefined) return labelWidth;
          labelWidth = d;
          return axis;
        };
        axis.yLabel = (d) => {
          if (d === undefined) return yLabel;
          yLabel = d;
          return axis;
        };
        axis.paddingInner = (d) => {
          if (!d) return scale.paddingInner();
          scale.paddingInner(d);
          return axis;
        };
        axis.paddingOuter = (d) => {
          if (!d) return scale.paddingOuter();
          scale.paddingOuter(d);
          return axis;
        };
        axis.plotDim = (d) => {
          if (!d) return plotDim;
          plotDim = d;
          return axis;
        };
        axis.rem = (d) => {
          if (!d) return rem;
          rem = d;
          return axis;
        };
        axis.tickSize = (d) => {
          if (d === undefined) return tickSize;
          tickSize = d;
          return axis;
        };
        axis.offset = (d) => {
          if (d === undefined) return offset;
          offset = d;
          return axis;
        };

        return axis;
      }

      return yOrdinal;

    })));
  </script>
</head>

<body><svg class=\\"ft-webgraphic-m-default\\" font-family=\\"MetricWeb,sans-serif\\" role=\\"img\\" aria-labelledby=\\"ft-webgraphic-m-default__chart-a11y-title ft-webgraphic-m-default__chart-a11y-desc\\" width=\\"700\\" height=\\"500\\" viewBox=\\"0 0 700 500\\">
    <title id=\\"ft-webgraphic-m-default__chart-a11y-title\\">A chart</title>
    <desc id=\\"ft-webgraphic-m-default__chart-a11y-desc\\">A graphic by the Financial Times</desc>
    <rect role=\\"presentation\\" id=\\"chart-background\\" class=\\"chart-background\\" x=\\"0\\" y=\\"0\\" width=\\"700\\" height=\\"500\\" fill=\\"rgb(255, 241, 224)\\"></rect>
    <rect width=\\"60\\" height=\\"4\\" style=\\"fill: rgb(0, 0, 0);\\"></rect><text class=\\"chart-title\\" id=\\"ft-webgraphic-m-defaulttitle\\">
      <tspan y=\\"32\\" x=\\"1\\" font-size=\\"28\\" font-family=\\"MetricWeb,sans-serif\\" font-weight=\\"400\\" fill=\\"#000\\">yOrdinal test</tspan>
    </text><text id=\\"ft-webgraphic-m-defaultsubtitle\\" class=\\"chart-subtitle\\">
      <tspan id=\\"ft-webgraphic-m-defaultsubtitle\\" y=\\"68\\" x=\\"1\\" font-size=\\"24\\" font-family=\\"MetricWeb,sans-serif\\" fill=\\"#66605C\\">Right-aligned, default scales</tspan>
    </text><text class=\\"chart-copyright\\">
      <tspan x=\\"1\\" y=\\"464\\" font-size=\\"14px\\" font-style=\\"italic\\" font-family=\\"MetricWeb,sans-serif\\" fill=\\"#66605C\\">© FT</tspan>
    </text>
    <g class=\\"chart-watermark\\" role=\\"presentation\\" transform=\\"translate(536,490) scale(1) \\"></g>
    <g class=\\"chart-plot\\" role=\\"presentation\\" transform=\\"translate(20,108)\\">
      <g class=\\"highlights\\"></g>
      <g class=\\"axis yAxis\\" fill=\\"none\\" font-size=\\"10\\" font-family=\\"sans-serif\\" text-anchor=\\"start\\" transform=\\"translate(541, 0)\\">
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,32.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Oranges</text>
        </g>
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,103.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Lemons</text>
        </g>
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,174.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Apples</text>
        </g>
        <g class=\\"tick\\" opacity=\\"1\\" transform=\\"translate(0,245.5)\\">
          <line stroke=\\"#000\\" x2=\\"0\\"></line><text fill=\\"#000\\" x=\\"3\\" dy=\\"0.32em\\" id=\\"webFrameMDefaultyLabel\\">Pears</text>
        </g>
      </g>
    </g>
    <title id=\\"ft-webgraphic-m-default__chart-a11y-title\\">A chart</title>
    <desc id=\\"ft-webgraphic-m-default__chart-a11y-desc\\">A graphic by the Financial Times</desc>
    <rect width=\\"60\\" height=\\"4\\" style=\\"fill: rgb(0, 0, 0);\\"></rect>
  </svg>
  <div class=\\"button-holder\\"><button class=\\"save-png-button save-png-button__1x\\" style=\\"float: left; opacity: 0.6;\\">Save as .png</button><button class=\\"save-png-button save-png-button__2x\\" style=\\"float: left; opacity: 0.6;\\">Save as double size .png</button></div>
</body>"
`;
